#!/usr/bin/env bash
#
# Render a Markdown file or stdin to HTML on stdout.
#
# Wraps the Markdown in HTML tags including charset and CSS file
# definition.
#

# default title if none specified:
#   if 2nd line is =======, 1st line
#     (note that we can check lines of stdin using head as per normal)
#   else if file, file name
#   else, $def_title
def_title="Rendered Markdown file"

# default CSS file
# Note that the file is not checked for existence -- by using relative
# links, you can set it to say "static/style.css"
# TODO: explain this better
def_css_file="$HOME/.assets/style.css"

# default syntax highlighting CSS file
def_highlight_css_file="$HOME/.assets/style-pygments.css"

# default favicon file
def_favicon_file="$HOME/.assets/favicon.png"

# default Markdown renderer to use (must be absolute or in $PATH)
# Must take input from stdin.
def_renderer="redcarpet-custom-wrapper.rb"

# default browser to open rendered files in
def_browser="firefox"



usage() {
    cat <<EOF
Usage: ${0##*/} [-t title] [-c css_file] [-f favicon] [-r file] [file...]
Render a Markdown file into a viewable HTML file.

If no files are present, stdin is read.

  Options:
    -t          page title
    -c          CSS file to apply to files
    -p          Syntax highlighting (Pygments) CSS file
    -f          favicon for page to link to
    -m          include MathJax
    -r          Markdown renderer to use
    -o          view rendered document in browser (firefox)
    -h          display this help message
EOF
}

while getopts ":t:c:f:mr:oh" opt; do
    case "$opt" in
        t) # page title
            title="$OPTARG"
            ;;
        c) # CSS file
            css_file="$OPTARG"
            ;;
        p) # highlight CSS file
            highlight_css_file="$OPTARG"
            ;;
        f) # favicon
            favicon_file="$OPTARG"
            ;;
        m) # MathJax
            use_mathjax=true
            ;;
        r) # Markdown renderer
            renderer="$OPTARG"
            ;;
        o) # view HTML in browser
            open_html=true
            ;;
        h) # display usage message
            usage
            exit 0
            ;;
    esac
done

shift $((OPTIND-1))

if [[ -z "$title" ]]; then
    if [[ $# -eq 0 ]]; then
        title="$def_title"
    else
        title="$(basename "$1")"
    # TODO: when >1 files, put names together?
    fi
fi

if [[ -z "$css_file" ]]; then
    css_file="$def_css_file"
fi

if [[ -z "$highlight_css_file" ]]; then
    highlight_css_file="$def_highlight_css_file"
fi

if [[ -z "$favicon_file" ]]; then
    favicon_file="$def_favicon_file"
fi

if [[ -z "$renderer" ]]; then
    renderer="$def_renderer"
fi

if [[ $# -eq 0 ]]; then
    # no files, render stdin
    body="$("$renderer")"
    filename="markdown-render-out"
else
    # render each files in a separate call to the renderer and
    # concatenate them together
    # This is required because it seems Redcarpet doesn't work well with
    # more than 1 file.
    for file in "$@"
    do
        body="${body}$("$renderer" "$file")"
    done
    filename="$1"
fi

if [[ $use_mathjax == true ]]; then
    mathjax='<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>'
fi



content="<!DOCTYPE html>
<html>
    <head>
        <meta charset=\"utf-8\">
        <title>$title</title>
        <link rel=\"icon\" href=\"$favicon_file\">
        <link rel=\"stylesheet\" type=\"text/css\" href=\"$css_file\">
        <link rel=\"stylesheet\" type=\"text/css\" href=\"$highlight_css_file\">
        $mathjax
    </head>
    <body>
<!-- START RENDERED MARKDOWN {{{ -->
$body
<!-- END RENDERED MARKDOWN }}} -->
    </body>
</html>"

if [[ $open_html == true ]]; then
    rendered_file="/tmp/${filename##*/}.html"
    echo "$content" > "$rendered_file"
    firefox "$rendered_file"
else
    echo "$content"
fi
