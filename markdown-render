#!/usr/bin/env bash
#
# Render a Markdown file or stdin to HTML on stdout.
#
# Wraps the Markdown in HTML tags including charset and CSS file
# definition.
#

_BASHPLATE_DIR="$HOME/.local/share/bashplate"
source "$_BASHPLATE_DIR/bashplate.sh"

tmpdir="/tmp/markdown-render"

# default title if none specified
def_title="Rendered Markdown file"

# default CSS file
# Note that the file is not checked for existence -- by using relative
# links, you can set it to say "static/style.css"
# TODO: explain this better
css_file="$HOME/.assets/style.css"

# default syntax highlighting CSS file
highlight_css_file="$HOME/.assets/style-pygments.css"

# default favicon file
favicon_file="$HOME/.assets/favicon.png"

# default Markdown renderer to use (must be absolute or in $PATH)
# Must take input from stdin.
renderer="redcarpet-custom-wrapper.rb"

# browser to open rendered files in
#browser="$FILE_OPENER"
browser="firefox"

_usage="\
Usage: $_FILENAME [-t title] [-c css_file] [-f favicon] [-r file] [file...]
Render a Markdown file into a viewable HTML file.

If no files are present, stdin is read.

  Options:
    -t          page title
    -c          CSS file to apply to files
    -p          Syntax highlighting (Pygments) CSS file
    -f          favicon for page to link to
    -m          include MathJax
    -r          Markdown renderer to use
    -o          view rendered document in browser (firefox)
    -h          display this help message\
"

# parse options
while getopts ":t:c:f:mr:oh" opt; do
    case "$opt" in
        t) title="$OPTARG" ;;
        c) css_file="$OPTARG" ;;
        p) highlight_css_file="$OPTARG" ;;
        f) favicon_file="$OPTARG" ;;
        m) use_mathjax=true ;;
        r) renderer="$OPTARG" ;;
        o) open_html=true ;;
        h) _print_usage 0 ;;
    esac
done

shift $((OPTIND-1))

# set up temp. dir
if [[ ! -e "$tmpdir" ]]; then
    # does not exist, so create
    mkdir "$tmpdir"
elif [[ -e "$tmpdir" ]] && [[ ! -d "$tmpdir" ]]; then
    # exists but is not a directory; remove & recreate
    rm -f "$tmpdir"
    mkdir "$tmpdir"
# else directory is already present
fi

if [[ -z "$title" ]]; then
    if [[ $# -eq 0 ]]; then
        # using stdin, no title to take: use default
        title="$def_title"
    else
        # use filename of (first) file
        title="${1##*/}"
    fi
fi

if [[ $# -eq 0 ]]; then
    # no files, render stdin
    body="$($renderer)"
    filename="markdown-render-out"
else
    # render each files in a separate call to the renderer and
    # concatenate them together
    # This is required because it seems Redcarpet doesn't work well with
    # more than 1 file.
    for file in "$@"
    do
        body="${body}$($renderer "$file")"
    done
    filename="${1##*/}"
fi

if [[ $use_mathjax ]]; then
    mathjax='<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>'
fi

content="<!DOCTYPE html>
<html>
    <head>
        <meta charset=\"utf-8\">
        <title>$title</title>
        <link rel=\"icon\" href=\"$favicon_file\">
        <link rel=\"stylesheet\" type=\"text/css\" href=\"$css_file\">
        <link rel=\"stylesheet\" type=\"text/css\" href=\"$highlight_css_file\">
        $mathjax
    </head>
    <body>
<!-- START RENDERED MARKDOWN {{{ -->
$body
<!-- END RENDERED MARKDOWN }}} -->
    </body>
</html>"

if [[ $open_html == true ]]; then
    rendered_file="$tmpdir/${filename}.html"
    echo "$content" > "$rendered_file"
    $browser "$rendered_file"
else
    echo "$content"
fi
